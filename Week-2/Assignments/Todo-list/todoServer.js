/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");
const app = express();

const port = 3000;

let ToDoList = [
  {
    id: 1,
    title: "Life Customer Code",
    description: "Understand the flow of the code.",
    completed: false,
  },
];

// Middleware to parse json data from request body
app.use(express.json());

app.listen(port, () => {
  console.log(`Listening on Port ${port}`);
});

app.get("/", (req, res) => {
  res.send("Go to /todos to get your todo list");
});

// Route to get all todos
app.get("/todos", (req, res) => {
  res.send(ToDoList).status(200);
});

// Route to get a specific todo item by id
app.get("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const task = ToDoList.find((item) => item.id === id);

  if (task) {
    res.send(task).status(200);
  } else {
    res.send(404);
  }
});

// Route to create a new todo
app.post("/todos", (req, res) => {
  const todoItem = req.body;
  todoItem.id = ToDoList.length + 1;
  ToDoList.push(todoItem);
  res.send(`Created with the Id ${todoItem.id}`).status(201);
});

// Route to update an existing todo Item by it's id
app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const todoIndex = ToDoList.findIndex((item) => item.id === id);
  if (todoIndex >= 0) {
    ToDoList[todoIndex] = req.body;
    ToDoList[todoIndex].id = id;
    res.send(200);
  } else {
    res.send(404);
  }
});

// Route to delete a todo item by it's id
app.delete("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);
  const isTodoPresent = ToDoList.find((item) => item.id === id);

  if (isTodoPresent) {
    ToDoList = ToDoList.filter((item) => item.id !== id);
    res.send(200);
  } else {
    res.send(404);
  }
});

// Any undefined route will return a 404 error
app.use((req, res) => {
  res.status(404).send("404 Not Found");
});
